 import Foundation
 import SwiftProtobuf

 // If the compiler emits an error on this type, it is because this file
 // was generated by a version of the `protoc` Swift plug-in that is
 // incompatible with the version of SwiftProtobuf to which you are linking.
 // Please ensure that your are building against the same version of the API
 // that was used to generate this file.
 fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
   struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
   typealias Version = _2
 }

 struct Notes_Empty {
   // SwiftProtobuf.Message conformance is added in an extension below. See the
   // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
   // methods supported on all messages.
   var unknownFields = SwiftProtobuf.UnknownStorage()

   init() {}
 }

 struct Notes_Note {
   // SwiftProtobuf.Message conformance is added in an extension below. See the
   // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
   // methods supported on all messages.
   var id: String = String()

   var title: String = String()

   var content: String = String()

   var unknownFields = SwiftProtobuf.UnknownStorage()

   init() {}
 }

 struct Notes_NoteList {
   // SwiftProtobuf.Message conformance is added in an extension below. See the
   // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
   // methods supported on all messages.
   var notes: [Notes_Note] = []

   var unknownFields = SwiftProtobuf.UnknownStorage()

   init() {}
 }

 struct Notes_NoteRequestId {
   // SwiftProtobuf.Message conformance is added in an extension below. See the
   // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
   // methods supported on all messages.
   var id: String = String()

   var unknownFields = SwiftProtobuf.UnknownStorage()

   init() {}
 }

 // MARK: - Code below here is support for the SwiftProtobuf runtime.
 extension Notes_Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
   static let protoMessageName: String = "Empty"
   static let _protobuf_nameMap = SwiftProtobuf._NameMap()

   mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let _ = try decoder.nextFieldNumber() {
     }
   }

   func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
     try unknownFields.traverse(visitor: &visitor)
   }

   func _protobuf_generated_isEqualTo(other: Notes_Empty) -> Bool {
     if unknownFields != other.unknownFields {return false}
     return true
   }
 }

 extension Notes_Note: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
   static let protoMessageName: String = "Note"
   static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
     1: .same(proto: "id"),
     2: .same(proto: "title"),
     3: .same(proto: "content"),
   ]

   mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
       switch fieldNumber {
       case 1: try decoder.decodeSingularStringField(value: &self.id)
       case 2: try decoder.decodeSingularStringField(value: &self.title)
       case 3: try decoder.decodeSingularStringField(value: &self.content)
       default: break
       }
     }
   }

   func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
     if !self.id.isEmpty {
       try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
     }
     if !self.title.isEmpty {
       try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
     }
     if !self.content.isEmpty {
       try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
     }
     try unknownFields.traverse(visitor: &visitor)
   }

   func _protobuf_generated_isEqualTo(other: Notes_Note) -> Bool {
     if self.id != other.id {return false}
     if self.title != other.title {return false}
     if self.content != other.content {return false}
     if unknownFields != other.unknownFields {return false}
     return true
   }
 }

 extension Notes_NoteList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
   static let protoMessageName: String = "NoteList"
   static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
     1: .same(proto: "notes"),
   ]

   mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
       switch fieldNumber {
       case 1: try decoder.decodeRepeatedMessageField(value: &self.notes)
       default: break
       }
     }
   }

   func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
     if !self.notes.isEmpty {
       try visitor.visitRepeatedMessageField(value: self.notes, fieldNumber: 1)
     }
     try unknownFields.traverse(visitor: &visitor)
   }

   func _protobuf_generated_isEqualTo(other: Notes_NoteList) -> Bool {
     if self.notes != other.notes {return false}
     if unknownFields != other.unknownFields {return false}
     return true
   }
 }

 extension Notes_NoteRequestId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
   static let protoMessageName: String = "NoteRequestId"
   static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
     1: .same(proto: "id"),
   ]

   mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
     while let fieldNumber = try decoder.nextFieldNumber() {
       switch fieldNumber {
       case 1: try decoder.decodeSingularStringField(value: &self.id)
       default: break
       }
     }
   }

   func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
     if !self.id.isEmpty {
       try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
     }
     try unknownFields.traverse(visitor: &visitor)
   }

   func _protobuf_generated_isEqualTo(other: Notes_NoteRequestId) -> Bool {
     if self.id != other.id {return false}
     if unknownFields != other.unknownFields {return false}
     return true
   }
 }
