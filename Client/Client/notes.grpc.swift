//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: protos/notes.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Notes_NoteServiceClient`, then call methods of this protocol to make API calls.
internal protocol Notes_NoteServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Notes_NoteServiceClientInterceptorFactoryProtocol? { get }

  func list(
    _ request: Notes_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Notes_Empty, Notes_NoteList>

  func get(
    _ request: Notes_NoteRequestId,
    callOptions: CallOptions?
  ) -> UnaryCall<Notes_NoteRequestId, Notes_Note>

  func insert(
    _ request: Notes_Note,
    callOptions: CallOptions?
  ) -> UnaryCall<Notes_Note, Notes_Note>

  func update(
    _ request: Notes_Note,
    callOptions: CallOptions?
  ) -> UnaryCall<Notes_Note, Notes_Note>

  func delete(
    _ request: Notes_NoteRequestId,
    callOptions: CallOptions?
  ) -> UnaryCall<Notes_NoteRequestId, Notes_Empty>
}

extension Notes_NoteServiceClientProtocol {
  internal var serviceName: String {
    return "notes.NoteService"
  }

  /// Unary call to List
  ///
  /// - Parameters:
  ///   - request: Request to send to List.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func list(
    _ request: Notes_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notes_Empty, Notes_NoteList> {
    return self.makeUnaryCall(
      path: "/notes.NoteService/List",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  /// Unary call to Get
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get(
    _ request: Notes_NoteRequestId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notes_NoteRequestId, Notes_Note> {
    return self.makeUnaryCall(
      path: "/notes.NoteService/Get",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// Unary call to Insert
  ///
  /// - Parameters:
  ///   - request: Request to send to Insert.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func insert(
    _ request: Notes_Note,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notes_Note, Notes_Note> {
    return self.makeUnaryCall(
      path: "/notes.NoteService/Insert",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInsertInterceptors() ?? []
    )
  }

  /// Unary call to Update
  ///
  /// - Parameters:
  ///   - request: Request to send to Update.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func update(
    _ request: Notes_Note,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notes_Note, Notes_Note> {
    return self.makeUnaryCall(
      path: "/notes.NoteService/Update",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delete(
    _ request: Notes_NoteRequestId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notes_NoteRequestId, Notes_Empty> {
    return self.makeUnaryCall(
      path: "/notes.NoteService/Delete",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }
}

internal protocol Notes_NoteServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'list'.
  func makeListInterceptors() -> [ClientInterceptor<Notes_Empty, Notes_NoteList>]

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<Notes_NoteRequestId, Notes_Note>]

  /// - Returns: Interceptors to use when invoking 'insert'.
  func makeInsertInterceptors() -> [ClientInterceptor<Notes_Note, Notes_Note>]

  /// - Returns: Interceptors to use when invoking 'update'.
  func makeUpdateInterceptors() -> [ClientInterceptor<Notes_Note, Notes_Note>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<Notes_NoteRequestId, Notes_Empty>]
}

internal final class Notes_NoteServiceClient: Notes_NoteServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Notes_NoteServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the notes.NoteService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Notes_NoteServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

